{"ast":null,"code":"import _objectSpread from \"/Users/marwan01/Desktop/Athlytics/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/marwan01/Desktop/Athlytics/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nvar config = {\n  apiKey: \"AIzaSyCGmvE7wqlcK4Qt36tFtAlb_WHFB_3S_nw\",\n  authDomain: \"athlytics5g.firebaseapp.com\",\n  databaseURL: \"https://athlytics5g.firebaseio.com\",\n  projectId: \"athlytics5g\",\n  storageBucket: \"athlytics5g.appspot.com\",\n  messagingSenderId: \"168458170038\"\n};\n\nvar Firebase = function Firebase() {\n  var _this = this;\n\n  _classCallCheck(this, Firebase);\n\n  this.doCreateUserWithEmailAndPassword = function (email, password) {\n    return _this.auth.createUserWithEmailAndPassword(email, password);\n  };\n\n  this.doSignInWithEmailAndPassword = function (email, password) {\n    return _this.auth.signInWithEmailAndPassword(email, password);\n  };\n\n  this.doSignInWithGoogle = function () {\n    return _this.auth.signInWithPopup(_this.googleProvider);\n  };\n\n  this.doSignInWithFacebook = function () {\n    return _this.auth.signInWithPopup(_this.facebookProvider);\n  };\n\n  this.doSignInWithTwitter = function () {\n    return _this.auth.signInWithPopup(_this.twitterProvider);\n  };\n\n  this.doSignOut = function () {\n    return _this.auth.signOut();\n  };\n\n  this.doPasswordReset = function (email) {\n    return _this.auth.sendPasswordResetEmail(email);\n  };\n\n  this.doDelete = function (uid) {\n    return admin.auth().deleteUser(uid);\n  };\n\n  this.doSendEmailVerification = function () {\n    return _this.auth.currentUser.sendEmailVerification({\n      url: \"http://localhost:3000\"\n    });\n  };\n\n  this.doPasswordUpdate = function (password) {\n    return _this.auth.currentUser.updatePassword(password);\n  };\n\n  this.onAuthUserListener = function (next, fallback) {\n    return _this.auth.onAuthStateChanged(function (authUser) {\n      if (authUser) {\n        _this.user(authUser.uid).once('value').then(function (snapshot) {\n          var dbUser = snapshot.val(); // default empty roles\n\n          if (!dbUser.roles) {\n            dbUser.roles = [];\n          } // merge auth and db user\n\n\n          authUser = _objectSpread({\n            uid: authUser.uid,\n            email: authUser.email,\n            emailVerified: authUser.emailVerified,\n            providerData: authUser.providerData\n          }, dbUser);\n          next(authUser);\n        });\n      } else {\n        fallback();\n      }\n    });\n  };\n\n  this.user = function (uid) {\n    return _this.db.ref(\"users/\".concat(uid));\n  };\n\n  this.users = function () {\n    return _this.db.ref('users');\n  };\n\n  this.user_workout = function (uid, ui) {\n    return _this.db.ref(\"users/\".concat(uid, \"/workouts/\").concat(ui));\n  };\n\n  this.message = function (uid) {\n    return _this.db.ref(\"messages/\".concat(uid));\n  };\n\n  this.messages = function () {\n    return _this.db.ref('messages');\n  };\n\n  app.initializeApp(config);\n  /* Helper */\n\n  this.serverValue = app.database.ServerValue;\n  this.emailAuthProvider = app.auth.EmailAuthProvider;\n  /* Firebase APIs */\n\n  this.auth = app.auth();\n  this.db = app.database();\n  /* Social Sign In Method Provider */\n\n  this.googleProvider = new app.auth.GoogleAuthProvider();\n  this.facebookProvider = new app.auth.FacebookAuthProvider();\n  this.twitterProvider = new app.auth.TwitterAuthProvider();\n} // *** Auth API ***\n;\n\nexport default Firebase;","map":{"version":3,"sources":["/Users/marwan01/Desktop/Athlytics/src/components/Firebase/firebase.js"],"names":["app","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Firebase","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignInWithGoogle","signInWithPopup","googleProvider","doSignInWithFacebook","facebookProvider","doSignInWithTwitter","twitterProvider","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doDelete","uid","admin","deleteUser","doSendEmailVerification","currentUser","sendEmailVerification","url","doPasswordUpdate","updatePassword","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","user","once","then","snapshot","dbUser","val","roles","emailVerified","providerData","db","ref","users","user_workout","ui","message","messages","initializeApp","serverValue","database","ServerValue","emailAuthProvider","EmailAuthProvider","GoogleAuthProvider","FacebookAuthProvider","TwitterAuthProvider"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAO,eAAP;AACA,OAAO,mBAAP;AAEA,IAAMC,MAAM,GAAG;AACfC,EAAAA,MAAM,EAAE,yCADO;AAEXC,EAAAA,UAAU,EAAE,6BAFD;AAGXC,EAAAA,WAAW,EAAE,oCAHF;AAIXC,EAAAA,SAAS,EAAE,aAJA;AAKXC,EAAAA,aAAa,EAAE,yBALJ;AAMXC,EAAAA,iBAAiB,EAAE;AANR,CAAf;;IASMC,Q,GACJ,oBAAc;AAAA;;AAAA;;AAAA,OAsBdC,gCAtBc,GAsBqB,UAACC,KAAD,EAAQC,QAAR;AAAA,WACjC,KAAI,CAACC,IAAL,CAAUC,8BAAV,CAAyCH,KAAzC,EAAgDC,QAAhD,CADiC;AAAA,GAtBrB;;AAAA,OAyBdG,4BAzBc,GAyBiB,UAACJ,KAAD,EAAQC,QAAR;AAAA,WAC7B,KAAI,CAACC,IAAL,CAAUG,0BAAV,CAAqCL,KAArC,EAA4CC,QAA5C,CAD6B;AAAA,GAzBjB;;AAAA,OA4BdK,kBA5Bc,GA4BO;AAAA,WACnB,KAAI,CAACJ,IAAL,CAAUK,eAAV,CAA0B,KAAI,CAACC,cAA/B,CADmB;AAAA,GA5BP;;AAAA,OA+BdC,oBA/Bc,GA+BS;AAAA,WACrB,KAAI,CAACP,IAAL,CAAUK,eAAV,CAA0B,KAAI,CAACG,gBAA/B,CADqB;AAAA,GA/BT;;AAAA,OAkCdC,mBAlCc,GAkCQ;AAAA,WACpB,KAAI,CAACT,IAAL,CAAUK,eAAV,CAA0B,KAAI,CAACK,eAA/B,CADoB;AAAA,GAlCR;;AAAA,OAqCdC,SArCc,GAqCF;AAAA,WAAM,KAAI,CAACX,IAAL,CAAUY,OAAV,EAAN;AAAA,GArCE;;AAAA,OAuCdC,eAvCc,GAuCI,UAAAf,KAAK;AAAA,WAAI,KAAI,CAACE,IAAL,CAAUc,sBAAV,CAAiChB,KAAjC,CAAJ;AAAA,GAvCT;;AAAA,OAyCdiB,QAzCc,GAyCH,UAACC,GAAD;AAAA,WAASC,KAAK,CAACjB,IAAN,GAAakB,UAAb,CAAwBF,GAAxB,CAAT;AAAA,GAzCG;;AAAA,OA2CdG,uBA3Cc,GA2CY;AAAA,WACxB,KAAI,CAACnB,IAAL,CAAUoB,WAAV,CAAsBC,qBAAtB,CAA4C;AAC1CC,MAAAA,GAAG,EAAE;AADqC,KAA5C,CADwB;AAAA,GA3CZ;;AAAA,OAgDZC,gBAhDY,GAgDO,UAAAxB,QAAQ;AAAA,WAC3B,KAAI,CAACC,IAAL,CAAUoB,WAAV,CAAsBI,cAAtB,CAAqCzB,QAArC,CAD2B;AAAA,GAhDf;;AAAA,OAqDd0B,kBArDc,GAqDO,UAACC,IAAD,EAAOC,QAAP;AAAA,WACnB,KAAI,CAAC3B,IAAL,CAAU4B,kBAAV,CAA6B,UAAAC,QAAQ,EAAI;AACvC,UAAIA,QAAJ,EAAc;AACZ,QAAA,KAAI,CAACC,IAAL,CAAUD,QAAQ,CAACb,GAAnB,EACGe,IADH,CACQ,OADR,EAEGC,IAFH,CAEQ,UAAAC,QAAQ,EAAI;AAChB,cAAMC,MAAM,GAAGD,QAAQ,CAACE,GAAT,EAAf,CADgB,CAGhB;;AACA,cAAI,CAACD,MAAM,CAACE,KAAZ,EAAmB;AACjBF,YAAAA,MAAM,CAACE,KAAP,GAAe,EAAf;AACD,WANe,CAQhB;;;AACAP,UAAAA,QAAQ;AACNb,YAAAA,GAAG,EAAEa,QAAQ,CAACb,GADR;AAENlB,YAAAA,KAAK,EAAE+B,QAAQ,CAAC/B,KAFV;AAGNuC,YAAAA,aAAa,EAAER,QAAQ,CAACQ,aAHlB;AAINC,YAAAA,YAAY,EAAET,QAAQ,CAACS;AAJjB,aAKHJ,MALG,CAAR;AAQAR,UAAAA,IAAI,CAACG,QAAD,CAAJ;AACD,SApBH;AAqBD,OAtBD,MAsBO;AACLF,QAAAA,QAAQ;AACT;AACF,KA1BD,CADmB;AAAA,GArDP;;AAAA,OAoFdG,IApFc,GAoFP,UAAAd,GAAG;AAAA,WAAI,KAAI,CAACuB,EAAL,CAAQC,GAAR,iBAAqBxB,GAArB,EAAJ;AAAA,GApFI;;AAAA,OAsFdyB,KAtFc,GAsFN;AAAA,WAAM,KAAI,CAACF,EAAL,CAAQC,GAAR,CAAY,OAAZ,CAAN;AAAA,GAtFM;;AAAA,OA0FdE,YA1Fc,GA0FC,UAAC1B,GAAD,EAAK2B,EAAL;AAAA,WAAY,KAAI,CAACJ,EAAL,CAAQC,GAAR,iBAAqBxB,GAArB,uBAAqC2B,EAArC,EAAZ;AAAA,GA1FD;;AAAA,OA4FdC,OA5Fc,GA4FJ,UAAA5B,GAAG;AAAA,WAAI,KAAI,CAACuB,EAAL,CAAQC,GAAR,oBAAwBxB,GAAxB,EAAJ;AAAA,GA5FC;;AAAA,OA8Fd6B,QA9Fc,GA8FH;AAAA,WAAM,KAAI,CAACN,EAAL,CAAQC,GAAR,CAAY,UAAZ,CAAN;AAAA,GA9FG;;AACZpD,EAAAA,GAAG,CAAC0D,aAAJ,CAAkBzD,MAAlB;AAEA;;AAEA,OAAK0D,WAAL,GAAmB3D,GAAG,CAAC4D,QAAJ,CAAaC,WAAhC;AACA,OAAKC,iBAAL,GAAyB9D,GAAG,CAACY,IAAJ,CAASmD,iBAAlC;AAEA;;AAEA,OAAKnD,IAAL,GAAYZ,GAAG,CAACY,IAAJ,EAAZ;AACA,OAAKuC,EAAL,GAAUnD,GAAG,CAAC4D,QAAJ,EAAV;AAEA;;AAEA,OAAK1C,cAAL,GAAsB,IAAIlB,GAAG,CAACY,IAAJ,CAASoD,kBAAb,EAAtB;AACA,OAAK5C,gBAAL,GAAwB,IAAIpB,GAAG,CAACY,IAAJ,CAASqD,oBAAb,EAAxB;AACA,OAAK3C,eAAL,GAAuB,IAAItB,GAAG,CAACY,IAAJ,CAASsD,mBAAb,EAAvB;AACD,C,CAED;;;AA6EF,eAAe1D,QAAf","sourcesContent":["import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\n\nconst config = {\napiKey: \"AIzaSyCGmvE7wqlcK4Qt36tFtAlb_WHFB_3S_nw\",\n    authDomain: \"athlytics5g.firebaseapp.com\",\n    databaseURL: \"https://athlytics5g.firebaseio.com\",\n    projectId: \"athlytics5g\",\n    storageBucket: \"athlytics5g.appspot.com\",\n    messagingSenderId: \"168458170038\"\n};\n\nclass Firebase {\n  constructor() {\n    app.initializeApp(config);\n\n    /* Helper */\n\n    this.serverValue = app.database.ServerValue;\n    this.emailAuthProvider = app.auth.EmailAuthProvider;\n\n    /* Firebase APIs */\n\n    this.auth = app.auth();\n    this.db = app.database();\n\n    /* Social Sign In Method Provider */\n\n    this.googleProvider = new app.auth.GoogleAuthProvider();\n    this.facebookProvider = new app.auth.FacebookAuthProvider();\n    this.twitterProvider = new app.auth.TwitterAuthProvider();\n  }\n\n  // *** Auth API ***\n\n  doCreateUserWithEmailAndPassword = (email, password) =>\n    this.auth.createUserWithEmailAndPassword(email, password);\n\n  doSignInWithEmailAndPassword = (email, password) =>\n    this.auth.signInWithEmailAndPassword(email, password);\n\n  doSignInWithGoogle = () =>\n    this.auth.signInWithPopup(this.googleProvider);\n\n  doSignInWithFacebook = () =>\n    this.auth.signInWithPopup(this.facebookProvider);\n\n  doSignInWithTwitter = () =>\n    this.auth.signInWithPopup(this.twitterProvider);\n\n  doSignOut = () => this.auth.signOut();\n\n  doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n  doDelete = (uid) => admin.auth().deleteUser(uid)\n\n  doSendEmailVerification = () =>\n    this.auth.currentUser.sendEmailVerification({\n      url: \"http://localhost:3000\",\n    });\n\n    doPasswordUpdate = password =>\n    this.auth.currentUser.updatePassword(password);\n\n// *** Merge Auth and DB User API *** //\n\n  onAuthUserListener = (next, fallback) =>\n    this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.user(authUser.uid)\n          .once('value')\n          .then(snapshot => {\n            const dbUser = snapshot.val();\n\n            // default empty roles\n            if (!dbUser.roles) {\n              dbUser.roles = [];\n            }\n\n            // merge auth and db user\n            authUser = {\n              uid: authUser.uid,\n              email: authUser.email,\n              emailVerified: authUser.emailVerified,\n              providerData: authUser.providerData,\n              ...dbUser,\n            };\n\n            next(authUser);\n          });\n      } else {\n        fallback();\n      }\n    });\n\n  // *** User API ***\n\n  user = uid => this.db.ref(`users/${uid}`);\n\n  users = () => this.db.ref('users');\n\n  // *** Message API ***\n\n  user_workout = (uid,ui) => this.db.ref(`users/${uid}/workouts/${ui}`);\n\n  message = uid => this.db.ref(`messages/${uid}`);\n\n  messages = () => this.db.ref('messages');\n}\n\nexport default Firebase;\n"]},"metadata":{},"sourceType":"module"}